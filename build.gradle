group 'org.yetiz.lib'
version = '1.1.1'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

archivesBaseName = "ACD-JAPI"

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.ning:async-http-client:1.9.3'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    // for Logging - start
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.3'
    compile 'org.apache.logging.log4j:log4j-api:2.3'
    compile 'org.apache.logging.log4j:log4j-core:2.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.1'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.6.1'
}

//def manifestMainClass = 'Launcher'
def manifestImplementationVersion = "${version}"
def manifestBuiltDate = System.currentTimeMillis()
//def manifestClassPath = configurations.compile.collect { "libs${File.separator}${it.getName()}" }.join(' ')

task library(type: Copy) {
    into "$buildDir${File.separator}output${File.separator}libs"
    from configurations.runtime
}

task copyLicense(type: Copy) {
    into sourceSets.main.output.resourcesDir
    from "$projectDir${File.separator}LICENSE"
}

task copyNotice(type: Copy) {
    into sourceSets.main.output.resourcesDir
    from "$projectDir${File.separator}NOTICE"
}

jar {
    dependsOn library
    dependsOn copyLicense
//    dependsOn copyNotice
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    destinationDir file("$buildDir${File.separator}output/")
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    destinationDir file("$buildDir${File.separator}output/")
    from sourceSets.main.allSource
}

task manifastJar(type: Jar) {
    archiveName = "$baseName-$version.$extension"
    destinationDir file("$buildDir${File.separator}output/")
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    manifest {
        attributes 'Implementation-Version': manifestImplementationVersion,
                'Built-Date': manifestBuiltDate
    }
}

artifacts {
    archives javadocJar, sourcesJar, manifastJar
}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name archivesBaseName
                packaging 'jar'
                description 'This project provide a Java version of Amazon Cloud Drive API from REST version.'
                url 'https://github.com/yetisno/ACD-JAPI'

                scm {
                    url 'scm:git@github.com:yetisno/ACD-JAPI.git'
                    connection 'scm:git@github.com:yetisno/ACD-JAPI.git'
                    developerConnection 'scm:git@github.com:yetisno/ACD-JAPI.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id 'yetisno'
                        name 'Yeti Sno'
                        email 'yeti@yetiz.org'
                    }
                }
            }
        }
    }

    signing {
//        sign configurations.archives
    }

}